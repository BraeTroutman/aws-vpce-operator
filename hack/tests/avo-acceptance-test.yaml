# This yaml is part of the Progressive Delivery POC 
# This approach was used at the first iteration and is no longer in use. 
# For updates please refer to this Doc: https://docs.google.com/document/d/1nK5VuJgf6fJf-_7C14Dtcy9epg3ZRboDUc4fpW87zc0/edit#heading=h.l9fl7fh9ufx0
---
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: ${JOB_NAME}
objects:
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: ${SERVICE_ACCOUNT}
    namespace: ${NAMESPACE}
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    name: ${SERVICE_ACCOUNT}
  rules:
  - apiGroups:
    - ""
    resources:
    - namespaces
    - secrets
    verbs:
    - get
    - list
  - apiGroups:
    - hive.openshift.io
    resources:
    - clusterdeployments
    verbs:
    - get
    - list
- kind: ClusterRoleBinding
  apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    name: ${SERVICE_ACCOUNT}
  subjects:
  - kind: ServiceAccount
    name: ${SERVICE_ACCOUNT}
    namespace: ${NAMESPACE}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: ${SERVICE_ACCOUNT}
- apiVersion: batch/v1
  kind: Job
  metadata:
    name: ${JOB_NAME}-${IMAGE_TAG}-${JOB_ID}
    namespace: ${NAMESPACE}
  spec:
    backoffLimit: 5
    template:
      spec:
        restartPolicy: Never
        serviceAccountName: ${SERVICE_ACCOUNT}
        containers:
        - image: ${TEST_IMAGE}
          imagePullPolicy: Always
          name: ${JOB_NAME}
          args:
          - /bin/bash
          - -c
          - |
            set -x
            set -o nounset
            set -o pipefail
            TEMPDIR=$(mktemp -d)

            non_updated_cluster=()
            # TODO: determine this directly from ClusterSync and SelectorSyncSet deployment
            sleep ${SLEEP_TIME}

            # Check management clusters
            oc get clusterdeployments -l ext-hypershift.openshift.io/cluster-type=management-cluster --all-namespaces -o json > ${TEMPDIR}/mcs.json
            echo "Verifying CSVs in MGT CLUSTERS..."
            cat ${TEMPDIR}/mcs.json | jq .items[].metadata.name
            jq -c .items[] ${TEMPDIR}/mcs.json | while read CD; do
                CD_NAME=$(echo "${CD}" | jq -r .metadata.name)
                CD_NAMESPACE=$(echo "${CD}" | jq -r .metadata.namespace)
                oc get secret -n ${CD_NAMESPACE} -l "hive.openshift.io/secret-type=kubeconfig" -o jsonpath='{.items[0].data.kubeconfig}' | base64 -d > ${TEMPDIR}/${CD_NAME}.config
                oc get nodes --kubeconfig ${TEMPDIR}/${CD_NAME}.config
                if [ "$?" != "0" ]; then
                  echo "Failed to connect to ${CD_NAME} cluster. Continuing..."
                  continue
                fi
                CSV_PHASE=$(oc get csv --kubeconfig ${TEMPDIR}/${CD_NAME}.config -n openshift-${OPERATOR_NAME} -l operators.coreos.com/${OPERATOR_NAME}.openshift-${OPERATOR_NAME}="" -o json | jq -r .items[0].status.phase)
                CSV_VERSION=$(oc get csv --kubeconfig ${TEMPDIR}/${CD_NAME}.config -n openshift-${OPERATOR_NAME} -l operators.coreos.com/${OPERATOR_NAME}.openshift-${OPERATOR_NAME}="" -o json | jq -r .items[0].spec.version)
                CSV_SHORT_SHA=$(echo ${CSV_VERSION} | awk -F'-' '{print $2}')
                if [ "${CSV_SHORT_SHA}" == "${IMAGE_TAG}" ] && [ "${CSV_PHASE}" == "Succeeded" ]; then
                  echo "Cluster $CD_NAME passed CSV check!"
                else
                  non_updated_cluster+=(MGT Cluster: ${CD_NAME})
                fi
            done

            # Check service clusters
            oc get clusterdeployments -l ext-hypershift.openshift.io/cluster-type=service-cluster --all-namespaces -o json > ${TEMPDIR}/scs.json
            echo "Verifying CSVs in SVC CLUSTERS:"
            cat ${TEMPDIR}/mcs.json | jq .items[].metadata.name
            jq -c .items[] ${TEMPDIR}/scs.json | while read CD; do
                CD_NAME=$(echo "${CD}" | jq -r .metadata.name)
                CD_NAMESPACE=$(echo "${CD}" | jq -r .metadata.namespace)
                oc get secret -n ${CD_NAMESPACE} -l "hive.openshift.io/secret-type=kubeconfig" -o jsonpath='{.items[0].data.kubeconfig}' | base64 -d > ${TEMPDIR}/${CD_NAME}.config
                oc get nodes --kubeconfig ${TEMPDIR}/${CD_NAME}.config
                if [ "$?" != "0" ]; then
                  echo "Failed to connect to ${CD_NAME} cluster. Continuing..."
                  continue
                fi
                CSV_PHASE=$(oc get csv --kubeconfig ${TEMPDIR}/${CD_NAME}.config -n openshift-${OPERATOR_NAME} -l operators.coreos.com/${OPERATOR_NAME}.openshift-${OPERATOR_NAME}="" -o json | jq -r .items[0].status.phase)
                CSV_VERSION=$(oc get csv --kubeconfig ${TEMPDIR}/${CD_NAME}.config -n openshift-${OPERATOR_NAME} -l operators.coreos.com/${OPERATOR_NAME}.openshift-${OPERATOR_NAME}="" -o json | jq -r .items[0].spec.version)
                CSV_SHORT_SHA=$(echo ${CSV_VERSION} | awk -F'-' '{print $2}')
                if [ "${CSV_SHORT_SHA}" == "${IMAGE_TAG}" ] && [ "${CSV_PHASE}" == "Succeeded" ]; then
                  echo "Cluster $CD_NAME passed CSV check!"
                else
                  non_updated_cluster+=(SVC Cluster: ${CD_NAME})
                fi
            done

            # Final check of map
            if [ ${#non_updated_cluster[@]} -eq 0 ]; then
                echo "TEST PASSED! All clusters have the correct operator version and succeeded!"
                exit 0
            else
                echo "TEST FAILED! The following clusters do not have the correct image tag:"
                for cluster in "${non_updated_cluster[@]}"; do
                    echo $cluster
                done
                exit 1
            fi
parameters:
- name: OPERATOR_NAME
  value: 'aws-vpce-operator'
  required: true
- name: JOB_NAME
  value: 'saas-avo-test'
  required: true
- name: NAMESPACE
  value: 'cluster-scope'
  required: true
- name: JOB_ID
  generate: expression
  from: "[0-9a-z]{7}"
- name: IMAGE_TAG
  value: ''
  required: true
- name: TEST_IMAGE
  value: quay.io/openshift/origin-tools
- name: SERVICE_ACCOUNT
  value: "saas-avo-test"
  displayName: saas-avo-test service account
  description: name of the service account to use when deploying the pod
- name: SLEEP_TIME
  value: "120"
  displayName: Sleep time
  description: Time to wait before checking the CSVs
